// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Impor tipe Json dari @prisma/client

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  name       String
  password   String
  avatar     String?
  address    String?
  phone      String?
  role       Role     @default(USER)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  //relation

  orderCart OrderCart[]
  cart      Cart[]
  saved     Saved[]
}

// ==================== Category =================== // 

model Category {
  id         Int      @id @default(autoincrement())
  name       String
  slug       String
  image      String?
  items      Items[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

// ==================== Items =================== // 

model Items {
  id          String   @id @default(nanoid(2))
  categoryId  Int
  name        String
  slug        String
  image       String?
  price       Int?
  address     String?
  positionlat Float?
  positionlng Float?
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  //relation
  cart      Cart[]
  category  Category    @relation(fields: [categoryId], references: [id])
  orderCart OrderCart[]
  saved     Saved[]
}

// ==================== cart =================== // 

model Cart {
  id         String   @id @default(nanoid(3))
  userId     String
  itemsId    String
  quantity   Int
  totalprice Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  //relations
  item Items @relation(fields: [itemsId], references: [id])
  user User  @relation(fields: [userId], references: [id])
}

// ==================== Order and Transaction ==================== //

model OrderCart {
  id              String        @id @default(nanoid(3))
  userId          String
  trxId           String
  items           Items[]
  totalCartPrice  Int
  linkPayment     String?
  paymentType     String?
  detetimePayment DateTime?
  statusPayment   StatusPayment @default(PENDING)
  statusOrder     StatusOrder   @default(PENDING)
  cartData        String        @db.VarChar(10000)
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt

  //relations
  user User @relation(fields: [userId], references: [id])
}

model Saved {
  id      String @id @default(nanoid(2))
  itemsId String
  userId  String

  user User  @relation(fields: [userId], references: [id])
  item Items @relation(fields: [itemsId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum StatusPayment {
  PENDING
  SUCCESS
  FAILED
}

enum StatusOrder {
  PENDING
  PROCESS
  SHIPPED
  DELIVERED
  FAILED
}
